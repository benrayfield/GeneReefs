a=>.1*a

a=>.2


a=>Math.sin(a*2)



//randomRadius
a=>.1+Math.random()


//spiral
a=>{
let ang = a*5;
let rad = a*.13;
return [rad*sin(ang),rad*cos(ang)];
}


//twoTrianglesConnected
a=>{
let ys = [1,2,3,4,5];
let xs = [1,2,1,2,1];
let mul = .27, addy = -1;
a *= ys.length/(2*Math.PI);
let lo = fl(a), hi = (lo+1)%ys.length;
let m = a-lo;
return [(ys[lo]*(1-m)+m*ys[hi])*mul+addy,(xs[lo]*(1-m)+m*xs[hi])*mul]
}


//sevenPointedStar
a=>{
let ys = [];
let xs = [];
let n = 7;
for(let i=0; i<n; i++){
	let ang = i/n*2*Math.PI;
	ys.push(sin(ang*2));
	xs.push(cos(ang*2));
}
let mul = .7;
a *= ys.length/(2*Math.PI);
let lo = fl(a), hi = (lo+1)%ys.length;
let m = a-lo;
return [(ys[lo]*(1-m)+m*ys[hi])*mul,(xs[lo]*(1-m)+m*xs[hi])*mul]
}

//fivePointedStar
a=>{
let ys = [];
let xs = [];
let n = 5;
for(let i=0; i<n; i++){
	let ang = i/n*2*Math.PI;
	ys.push(sin(ang*2));
	xs.push(cos(ang*2));
}
let mul = .7;
a *= ys.length/(2*Math.PI);
let lo = fl(a), hi = (lo+1)%ys.length;
let m = a-lo;
return [(ys[lo]*(1-m)+m*ys[hi])*mul,(xs[lo]*(1-m)+m*xs[hi])*mul]
}


//pentagon
a=>{
let ys = [];
let xs = [];
let n = 5;
for(let i=0; i<n; i++){
	let ang = i/n*2*Math.PI;
	ys.push(sin(ang));
	xs.push(cos(ang));
}
let mul = .5;
a *= ys.length/(2*Math.PI);
let lo = fl(a), hi = (lo+1)%ys.length;
let m = a-lo;
return [(ys[lo]*(1-m)+m*ys[hi])*mul,(xs[lo]*(1-m)+m*xs[hi])*mul]
}


//triangle
a=>{
let ys = [];
let xs = [];
let n = 3;
for(let i=0; i<n; i++){
	let ang = i/n*2*Math.PI;
	ys.push(sin(ang));
	xs.push(cos(ang));
}
let mul = .5;
a *= ys.length/(2*Math.PI);
let lo = fl(a), hi = (lo+1)%ys.length;
let m = a-lo;
return [(ys[lo]*(1-m)+m*ys[hi])*mul,(xs[lo]*(1-m)+m*xs[hi])*mul]
}

//square
a=>{
let ys = [1,1,-1,-1];
let xs = [-1,1,1,-1];
let mul = .5;
a *= ys.length/(2*Math.PI);
let lo = fl(a), hi = (lo+1)%ys.length;
let m = a-lo;
return [(ys[lo]*(1-m)+m*ys[hi])*mul,(xs[lo]*(1-m)+m*xs[hi])*mul]
}


a=>[
(a*cos(Math.pow(1.4,a)+22/(1+a))*sin(a*.23)+sin(3.2+cos(sin(a)*a)))/5+.5,
(sin(a)+sin(3.2+cos(sin(a/3+2)*Math.pow(112/(a+.1),.25))))/2
]


a=>[
(sin(a*.23)+sin(3.2+cos(sin(a)*a)))/3,
(sin(a)+sin(3.2+cos(sin(a/3+2)*Math.pow(112/(a+.1),.25))))/2
]


a=>[
(sin(a*3)+sin(3.2+cos(sin(a)*a)))/3,
(sin(a)+sin(3.2+cos(sin(a/3+2)*Math.pow(112/(a+.1),.25))))/2
]


a=>.3*(sin(a*3)+sin(3.2+a*23))
//a=>(sin(a*3)+sin(3.2+a*23))


a=>(sin(a*3)+sin(a/5))


a=>[
(sin(a*3)+sin(3.2+cos(sin(a)*a)))/3,
(sin(a)+sin(3.2+cos(sin(a)*a)))/2
]


//tiltedSineWaveCrossesItselfInCenter
a=>[
(sin(a*3)+sin(3.2+a*.23))*.5+.3,
(sin(a*3)+sin(a/5))/2-.3
]


//fatBone
a=>[
sin(a+cos(a*2))/3,
cos(a)/2
]


a=>{
let x=cos(a), y=sin(a), dt=.01;
for(let i=0; i<1; i+=dt){
	x += dt*(.3*sin(y*y*y*5/(.1+x)));
	y -= dt*(x*x*x*45);
}
let mul = .5/Math.hypot(y,x);
return [y*mul,x*mul];
}


a=>{
let x=cos(a), y=sin(a), dt=.01;
for(let i=0; i<1; i+=dt){
	x += dt*(.3*sin(y*5));
	y -= dt*(x*x*x*45);
}
let mul = .5/Math.hypot(y,x);
return [y*mul,x*mul];
}


//polesCrossEachother
a=>{
let x=cos(a), y=sin(a), dt=.01;
for(let i=0; i<1; i+=dt){
	x += .3*sin(y*5);
	y -= .03*cos(2.3+x*11);
}
let mul = .5/Math.hypot(y,x);
return [y*mul,x*mul];
}


a=>{
let x=cos(a), y=sin(a), dt=.01;
for(let i=0; i<1; i+=dt){
	x += 13*dt*(.3*sin(y*5/(2.1+x*y)));
	y -= 4*dt*(x*5/(.1+i));
}
let mul = .5/Math.hypot(y,x);
return [y*mul,x*mul];
}


//coil
a=>[
.6*(sin(a*3)+sin(3.2+a*.23))*.5+.3,
.6*(sin(a*3)+cos(a*3))/2
]
/*a=>[
(sin(a*3)+sin(3.2+a*.23))*.5+.3,
(sin(a*3)+cos(a*3))/2
]*/


//curvyNearMiddleSticksOutBottomRight
a=>{
let x=cos(a), y=sin(a), dt=.01;
for(let i=0; i<1; i+=dt){
	x += dt*x*(2+sin(y*5));
	y += dt*44*sigmoid(x+8/(1+3*y)-2);
}
let mul = .05;
return [y*mul,x*mul];
}


a=>{
let x=cos(a), y=sin(a), dt=.01;
for(let i=0; i<1; i+=dt){
	x += 1.5*dt*x*y;
	y += 3*dt*sigmoid(8*y*y-2);
}
let mul = .1;
return [y*mul,x*mul];
}


//pointyHill
a=>{
let x=cos(a), y=sin(a), dt=.01;
for(let i=0; i<1; i+=dt){
	x += 1.5*dt*x*y;
	y += 3*dt*sigmoid(8/(1+3*y)-2);
}
let mul = .15;
return [y*mul,x*mul];
}


//bentPolesALittleCrossing
a=>{
let x=cos(a), y=sin(a), dt=.01;
let z = sin(a);
for(let i=0; i<1; i+=dt){
	x += dt*2.8*(y-z);
	y += dt*1.6*(y-x/(3+z));
	z += dt*4.7*(z+x*y);
}
let mul = .04;
y *= mul;
x *= mul;
let len = Math.hypot(y,x);
if(len > 1){ y /= len; x /= len; }
return [y,x];
}


//curvySShapeALittleCrossing
a=>{
let x=cos(a), y=sin(a), dt=.01;
let z = sin(a*3);
for(let i=0; i<1; i+=dt){
	x += dt*3*(y-z);
	y += dt*.8*(y-x+z);
	z += dt*.7*(z+x*y);
}
let mul = .14;
return [y*mul,x*mul];
}


a=>{
let x=cos(a), y=sin(a), dt=.01;
let z = sin(a*3);
for(let i=0; i<1; i+=dt){
	x += dt*x*1.2*(2+sin(y*5));
	y += dt*44*sigmoid(x+8/(1+3*y)-2+z*1.6);
	z += dt*(x+y)*.3;
}
let mul = .05;
return [y*mul,x*mul];
}


//flatHeadMushroomConeBase
a=>{
let x=cos(a), y=sin(a), dt=.01;
for(let i=0; i<1; i+=dt){
	x += 1.5*dt*x*sin(y*5);
	y += 3*dt*sigmoid(8/(1+3*y)-2);
}
let mul = .25;
return [y*mul,x*mul];
}


//partOfACircleLayingOnPoleStickingUp
a=>{
let x=cos(a), y=sin(a), dt=.01;
for(let i=0; i<1; i+=dt){
	x += dt*(.3*sin(y*5));
	y -= dt*(.03*cos(2.3+x*11)+.99/(1+x));
}
let mul = .5/Math.hypot(y,x);
return [y*mul,x*mul];
}


a=>{
let x=cos(a), y=sin(a), dt=.01;
let z = sin(a*3);
for(let i=0; i<1; i+=dt){
	x += dt*x*1.2*(2+sin(y*5)-z*.1);
	y += dt*14*sigmoid(x+8/(1+3*z)-2+z*1.6);
	z += dt*(x+y)*.3;
}
let mul = .05;
return [y*mul,x*mul];
}


a=>{
let x=cos(a), y=sin(a), dt=.01;
let z = sin(a*3);
for(let i=0; i<1; i+=dt){
	x += dt*x*1.2*(2+sin(y*5)-z);
	y -= dt*34*sigmoid(x+(z*y)/(1+3*z)-2+z*3.6);
	z -= dt*(x+y)*(5+z)*.003;
}
let mul = .025;
return [y*mul,x*mul];
}





//pie with top right quarter removed
a=>{ a /= 2*Math.PI; return (.25<a && a<.5) ? 0 : 1; }


//diagonal line through half circle
a=>{
let m = .5;
a = (a-Math.PI/200)%(2*Math.PI);
if(a<Math.PI){
	return [cos(a)*m,cos(a)*m];
}else{
	return [cos(a)*m,.3+sin(a)*m];
}
}

//2 part circles and 2 crossing lines
a=>{
let m = .5;
if(a<Math.PI*2/3){
	return [1.5*cos(a)*m, 1.5*sin(a)*m];
}else{
	return [-cos(a)*m, -.3-sin(a)*m];
}
}

//fat spiral or snail shell
a=>Math.cbrt(a/(2*Math.PI))/2

//old kind of key hole
a=>{
let m = .5;
let b = (a+Math.PI*1.85)%(2*Math.PI);
if(a<Math.PI*.3){
	return [1.3*cos(b)*m, 1.3*sin(b)*m];
}else{
	return [.6*cos(b)*m, .6*sin(b)*m];
}
}

//half of circle slides off the other half
a=>{
let m = .5;
a = (a-Math.PI/200)%(2*Math.PI);
if(a<Math.PI){
	return [sin(a)*m,cos(a)*m];
}else{
	return [sin(a)*m,.3+cos(a)*m];
}
}

//loop B or corner of pacmans lip has something tied to it
a=>{
let m = .5;
a = (a-Math.PI/200)%(2*Math.PI);
if(a<Math.PI){
	return [1.5*cos(a*.5)*m-.1, 1.2*sin(a)*m];
}else{
	return [cos(a*1.5)*m-.1, sin(a*1.5)*m];
}
}


//similar to half moon but could use better angles of the 2 circles, and it has 2 short straight lines between them
a=>{
let m = .5, dx=-.2;
if(a<Math.PI){
	return [cos(-a)*m, .3-sin(-a)*m+dx];
}else{
	return [cos(-a)*m, sin(-a)*m+dx];
}
}

//bent oval with 8 shaped loop around its topright to top bottom
a=>{
let m = .3, dx=.2;
let ay = cos(-a*2)*m;
let ax = .3-sin(-a*2)*m+dx;
let by = cos(-a*2)*m;
let bx = sin(-a*2)*m+dx;
let mix = sin(a);

return [ay*mix+(1-mix)*by, ax*mix+(1-mix)*bx];
}


a=>{let M=Math;a/=(2*M.PI);let b=(1+M.sin(a));let c=(a+a);let d=(a*a);let e=(2+M.sin(c));let f=(d+c);let g=-c;let h=M.exp(f);let i=(M.sin(h));let j=M.cos(f);return [i*.5,j*.5];}






