{"timeSaved":1644158729.7363,"options":{"loops":{"timePosition":[0.03219524398446083,-0.1382308006286621,0.9129999876022339,0.31700000166893005,1.0720000267028809,1.2860000133514404,1.3890000581741333,0.5979999899864197],"colorDecayPerSec":[-0.5120413899421692,-1.171928882598877,0.8989580869674683,1.5461041927337646,2.0105133056640625,1.7830519676208496,1.403714895248413,-0.3424648940563202]},"bootShapeY":0.01,"bootShapeX":0.01,"bootShapeScale":1,"nearPdist":0.046,"friction":0,"loopSeconds":30,"useTimePosition":true,"timePosition":11.073,"timePositionDecay":0.29,"timeSpeed":0.831,"minPointsPerCurve":137,"maxPointsPerCurve":700,"maxNumPointsPerCurveChangeAtOnce":398,"borderFraction":0.663,"maxSpeed":0.116,"targetDistanceBetweenAdjacentCurvePoints":0.012,"maxCurvesPerReef":10000,"scalePotentialEnergyForce":2.104,"ampStraightIfNear":334008857.205,"maxDistanceToAffectEachother":0.108,"addRandomness":176957.849,"stayInsideBorderCircleForce":-978243314082.1058,"distanceScale":0.023,"pause":false,"attractIfFartherThan":0.4,"ampAttractIfFartherThan":1144,"graphEndist":true,"isSurface":true,"displayOuterCircle":true,"ifCanvasUseUndoGraphics":true,"negTimeDoesUndo":true,"autoMoveTimeSpeedSlider":false,"balanceSparsity":true,"onlyEndist":false,"setSpeedsToZeroAfterEveryDtMove":false,"freqA":76.709,"ampA":339667.758,"freqB":-2.88,"ampB":202533.369,"freqC":6.532874236816541,"ampC":-781559.342,"midDist":0.057,"bellAAveMul":0.416,"bellADevMul":0.214,"bellAHeight":12202510.249,"bellBAveMul":0.904,"bellBDevMul":0.474,"bellBHeight":1412927.023,"bellCAveMul":7.343,"bellCDevMul":18.857,"bellCHeight":-11199.086,"forceMaxResolution":true,"stretchToWindow":true,"canvasElseSvg":true,"isEraseCanvasEachFrame":true,"repelSelf":49280.617,"repelSelfDistance":40.162,"computeSpeed":1.291,"colorSeed":8400328863760,"colorDecayPerSec":3,"endist":"(en,dist,pdist)=>{ let x = 0; let p = o; let nd = p.nearPdist; let near = sigmoid(-5*(dist-nd)); if(dist > o.attractIfFartherThan) x += o.ampAttractIfFartherThan*sqr(dist-o.attractIfFartherThan); x += o.ampStraightIfNear*near*sqr(dist-pdist); let midDist = p.midDist; x += bell(midDist*p.bellAAveMul,midDist*p.bellADevMul,p.bellAHeight,dist); x += bell(midDist*p.bellBAveMul,midDist*p.bellBDevMul,p.bellBHeight,dist); x += bell(midDist*p.bellCAveMul,midDist*p.bellCDevMul,p.bellCHeight,dist); let m=dist*twoPi; x += sin(m*p.freqA)*p.ampA; x += sin(m*p.freqB)*p.ampB; x += sin(m*p.freqC)*p.ampC; x += en; return x; }","name":"3dREEF1+colordec","dir":"2"}}