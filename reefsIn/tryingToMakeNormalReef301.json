{"timeSaved":1644604175.3683002,"options":{"loops":{"timePosition":[0.216,1.735,1.825,2.743,1.858,1.447,-0.365,-0.004,0.652,2.177,1.656,1.98,2.799,2.742,0.782,-0.273],"bellAHeight":[2.791,1.283,-2.553,2.352,2.232,-0.521,2.587,2.662,2.113,2.885,-1.169,2.625,2.653,-2.113,2.288,2.287]},"bootShapeY":0.01,"bootShapeX":0.01,"bootShapeScale":1,"nearPdist":0.046,"friction":0,"loopSeconds":30,"useTimePosition":true,"timePosition":0.969,"timePositionDecay":0.142,"timeSpeed":0.831,"minPointsPerCurve":27,"maxPointsPerCurve":984,"maxNumPointsPerCurveChangeAtOnce":71,"borderFraction":0.663,"maxSpeed":0.784,"targetDistanceBetweenAdjacentCurvePoints":0.012,"maxCurvesPerReef":10000,"scalePotentialEnergyForce":2.104,"ampStraightIfNear":370857425782.262,"maxDistanceToAffectEachother":0.059,"addRandomness":195.598,"stayInsideBorderCircleForce":5361433391626.719,"distanceScale":0.023,"pause":false,"attractIfFartherThan":0.508,"ampAttractIfFartherThan":2639.428,"graphEndist":true,"isSurface":false,"displayOuterCircle":true,"ifCanvasUseUndoGraphics":true,"negTimeDoesUndo":true,"autoMoveTimeSpeedSlider":false,"balanceSparsity":true,"onlyEndist":false,"setSpeedsToZeroAfterEveryDtMove":false,"freqA":76.709,"ampA":339667.758,"freqB":1.781,"ampB":479275311.589,"freqC":120.393,"ampC":168142767.253,"midDist":0.06,"bellAAveMul":0.362,"bellADevMul":0.044,"bellAHeight":2512081.387,"bellBAveMul":0.904,"bellBDevMul":0.474,"bellBHeight":1412927.023,"bellCAveMul":5.566,"bellCDevMul":0.372,"bellCHeight":-23425.21,"forceMaxResolution":true,"stretchToWindow":true,"canvasElseSvg":true,"isEraseCanvasEachFrame":true,"repelSelf":49280.617,"repelSelfDistance":40.162,"computeSpeed":1.291,"colorSeed":198169162371903,"colorDecayPerSec":3,"endist":"(en,dist,pdist)=>{ let x = 0; let p = o; let nd = p.nearPdist; let near = sigmoid(-5*(dist-nd)); if(dist > o.attractIfFartherThan) x += o.ampAttractIfFartherThan*sqr(dist-o.attractIfFartherThan); x += o.ampStraightIfNear*near*sqr(dist-pdist); let midDist = p.midDist; x += bell(midDist*p.bellAAveMul,midDist*p.bellADevMul,p.bellAHeight,dist); x += bell(midDist*p.bellBAveMul,midDist*p.bellBDevMul,p.bellBHeight,dist); x += bell(midDist*p.bellCAveMul,midDist*p.bellCDevMul,p.bellCHeight,dist); let m=dist*twoPi; x += sin(m*p.freqA)*p.ampA; x += sin(m*p.freqB)*p.ampB; x += sin(m*p.freqC)*p.ampC; x += en; return x; }","name":"tryingToMakeNormalReef301","dir":"1"}}