{"timeSaved":1644598785.4212,"options":{"loops":{"timePosition":[1.29,0.895,1.602,2.247,1.883,1.424,1.065,0.728,0.159,0.236,0.533,1.356,2.458,2.976,2.489,2.099,1.533,0.96,0.507,0.485,0.888,1.28,1.298,0.127,0.083,1.402,1.377,0.297,0.341,1.062,1.869,1.725]},"bootShapeY":0.01,"bootShapeX":0.01,"bootShapeScale":1,"nearPdist":0.046,"friction":0,"loopSeconds":30,"useTimePosition":true,"timePosition":2.957,"timePositionDecay":0.29,"timeSpeed":0.831,"minPointsPerCurve":137,"maxPointsPerCurve":700,"maxNumPointsPerCurveChangeAtOnce":398,"borderFraction":0.1,"maxSpeed":0.116,"targetDistanceBetweenAdjacentCurvePoints":0.012,"maxCurvesPerReef":10000,"scalePotentialEnergyForce":2.104,"ampStraightIfNear":115260247.976,"maxDistanceToAffectEachother":0.108,"addRandomness":176957.849,"stayInsideBorderCircleForce":5361433391626.719,"distanceScale":0.023,"pause":false,"attractIfFartherThan":0.4,"ampAttractIfFartherThan":1144,"graphEndist":true,"isSurface":false,"displayOuterCircle":true,"ifCanvasUseUndoGraphics":true,"negTimeDoesUndo":true,"autoMoveTimeSpeedSlider":false,"balanceSparsity":true,"onlyEndist":false,"setSpeedsToZeroAfterEveryDtMove":false,"freqA":29.827,"ampA":132.478,"freqB":-2.88,"ampB":15038.327,"freqC":6.058,"ampC":16815.684,"midDist":0.057,"bellAAveMul":0.416,"bellADevMul":0.214,"bellAHeight":12202510.249,"bellBAveMul":0.904,"bellBDevMul":0.474,"bellBHeight":1412927.023,"bellCAveMul":7.343,"bellCDevMul":18.857,"bellCHeight":-11199.086,"forceMaxResolution":true,"stretchToWindow":true,"canvasElseSvg":true,"isEraseCanvasEachFrame":true,"repelSelf":49280.617,"repelSelfDistance":40.162,"computeSpeed":1.003,"colorSeed":8400328863760,"colorDecayPerSec":3,"bootShape":"a=>.1*a","graphEndistBright":"Math.sqrt","endist":"(en,dist,pdist)=>{ let x = 0; let p = o; let nd = p.nearPdist; let near = sigmoid(-5*(dist-nd)); if(dist > o.attractIfFartherThan) x += o.ampAttractIfFartherThan*sqr(dist-o.attractIfFartherThan); x += o.ampStraightIfNear*near*sqr(dist-pdist); let midDist = p.midDist; x += bell(midDist*p.bellAAveMul,midDist*p.bellADevMul,p.bellAHeight,dist); x += bell(midDist*p.bellBAveMul,midDist*p.bellBDevMul,p.bellBHeight,dist); x += bell(midDist*p.bellCAveMul,midDist*p.bellCDevMul,p.bellCHeight,dist); let m=dist*twoPi; x += sin(m*p.freqA)*p.ampA; x += sin(m*p.freqB)*p.ampB; x += sin(m*p.freqC)*p.ampC; x += en; return x; }","name":"tryMakeNormalReef106","dir":"1"}}